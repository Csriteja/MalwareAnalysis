from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse

from . models import File
import os
import datetime
import pefile
import struct
import io
import requests
import os.path
import time
import re

from . import trail


IMAGE_FILE_MACHINE_I386=332
IMAGE_FILE_MACHINE_IA64=512
IMAGE_FILE_MACHINE_AMD64=34404

# Create your views here.

# def staticanalysis(request):
#     content = trail.getStaticAnalysisContent();
#     response = HttpResponse(content, content_type='text/html')
#     return response

# def static(request):
#     # content = 'any string generated by django'
#     # return HttpResponse(content, content_type='text/plain')
#     #return render(request, 'file/static.html')
#     f = open("/home/sri/PycharmProjects/DjangoFileUpload/server/strings.txt", 'r')
#
#     content="<html><head><title>Hi</title></head><body><h2 align='center'>"
#     temp = f.read()
#     content+=temp
#     content+="</h2></body></html>"
#     f.close()
#     response = HttpResponse(content, content_type='text/html')
#     return response

def welcome(request):

    return render(request, 'file/welcome.html')


def error(request):
    return render(request, 'file/error.html')


def index(request):
    if request.method == 'POST' and request.FILES['file']:
        actions=request.POST.getlist('Action')
        if actions[0] == 'Static':
            upload_file = request.FILES['file']
            extension = os.path.splitext(upload_file.name)[1]
            rename = datetime.datetime.now().strftime("%Y_%m_%d %H_%M_%S") + extension
            fss = FileSystemStorage()

            filename = fss.save(rename, upload_file)

            file = File(file=rename)

            file.save()

            upload_file_path = fss.path(filename)

            file_size = trail.file_size(upload_file_path)
            md5=trail.hash_values(upload_file_path)[0]
            sha1 = trail.hash_values(upload_file_path)[1]
            sha256=trail.hash_values(upload_file_path)[2]

            f = upload_file_path
            fl = open(f, "rb")
            s = fl.read(5)
            byte_range = bytearray(s)
            date_header, timestamp = struct.unpack('>BL', byte_range)
            print(date_header)
            if date_header!=77:
                print(" Not an EXE file")
                return render(request, 'file/error.html',
                              {'failure_message': "Not an exe. Please check the uploaded file and try again"})

            else:
                fl.seek(60)
                s = fl.read(4)
                header_offset = struct.unpack("<L", s)[0]
                fl.seek(header_offset + 4)
                s = fl.read(2)
                machine = struct.unpack("<H", s)[0]

                if machine == IMAGE_FILE_MACHINE_I386:
                    print(" Image Type = IA-32 (32-bit x86)")
                    fp = open("/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/image_type.txt", 'a')
                    fp.write("Image Type = IA-32 (32-bit x86)")
                    fp.write('\n\n')
                    fp.close()
                elif machine == IMAGE_FILE_MACHINE_IA64:
                    print(" Image Type = IA-64 (Itanium)")
                    fp = open("/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/image_type.txt", 'a')
                    fp.write("Image Type = IA-64 (Itanium)")
                    fp.write('\n\n')
                    fp.close()
                elif machine == IMAGE_FILE_MACHINE_AMD64:
                    print(" Image Type = AMD64 (64-bit x86)")
                    fp = open("/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/image_type.txt", 'a')
                    fp.write("Image Type = AMD64 (64-bit x86)")
                    fp.write('\n\n')
                    fp.close()
                else:
                    print(" Unknown architecture")

                file_size = trail.file_size(f)
                modified_time = time.ctime(os.path.getmtime(f))
                created_time=time.ctime(os.path.getctime(f))

                # print('\n File Size = ' + trail.file_size(f))
                # print('\n Last Modified Date = %s' % time.ctime(os.path.getmtime(f)))
                # print('\n Created Date = %s' % time.ctime(os.path.getctime(f)))



            fl.close()
            positives=0
            total=0
            virustotal=trail.VT_Request('eca6223108ae025265a09a1723ddc2d7396c31ab41f720428f9a9fc7bd4cb95e', md5, upload_file_path)
            if isinstance(virustotal, str):
                output=virustotal
            else:
                 positives=virustotal[0]
                 total=virustotal[1]

            #!!!!!!!!!!!!!!!!!!!!!!!!!1 read the csv also. Classify and put them in this file.!!!!!!!!!!!!!!!!!!!!!!!!!!!1

            fp = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/VTScan.txt', 'a')
            fp.write('Sample classified to be malicious by '+str(positives)+' by '+str(total)+' AV vendors')
            fp.write('\n')
            fp.close()

            try:

                fp = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/hashes.txt', 'a')
                fp.write('MD5: '+md5)
                fp.write('\n')
                fp.write('SHA1: '+sha1)
                fp.write('\n')
                fp.write('SHA256: '+sha256)

                print("\n\n-----------------.")
                print('[*] PE Analysis |')
                print('-----------------`')
                pe = pefile.PE(f)
                print('\n ImageBase = ' + hex(pe.OPTIONAL_HEADER.ImageBase))
                print('\n Address Of EntryPoint = ' + hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
                print('\n Number Of RvaAndSizes = ' + hex(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))
                print('\n Number Of Sections = ' + hex(pe.FILE_HEADER.NumberOfSections))

                fp = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/sections.txt', 'a')

                fp.write('ImageBase = ' + hex(pe.OPTIONAL_HEADER.ImageBase))
                fp.write('\n\nAddress Of EntryPoint = ' + hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
                fp.write('\n\nNumber Of RvaAndSizes = ' + hex(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))
                fp.write('\n\nNumber Of Sections = ' + hex(pe.FILE_HEADER.NumberOfSections))
                fp.write('\n')
                fp.write('\n')

                # List Import Sections
                print('\n [*] Listing Sections...\n')
                fp.write('\n')
                fp.write('\n')
                fp.write('[*] Listing Sections \n\n')

                for section in pe.sections:
                    print('\t' + section.Name.decode('utf-8'))
                    print("\t\tVirtual Address: " + hex(section.VirtualAddress))
                    print("\t\tVirtual Size: " + hex(section.Misc_VirtualSize))
                    print("\t\tRaw Size: " + hex(section.SizeOfRawData))
                    fp.write('\n ' + section.Name.decode('utf-8'))
                    fp.write("\n\n\tVirtual Address: " + hex(section.VirtualAddress))
                    fp.write("\n\n\tVirtual Size: " + hex(section.Misc_VirtualSize))
                    fp.write("\n\n\tRaw Size: " + hex(section.SizeOfRawData))
                print('\n')

                ## List Import DLL"
                fp = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/imports.txt', 'a')
                fp.write('\nImported DLLs')
                print(' [*] Listing imported DLLs...\n')
                for lst in pe.DIRECTORY_ENTRY_IMPORT:
                    print('\n ' + lst.dll.decode('utf-8'))
                    fp.write('\n' + lst.dll.decode('utf-8'))
                    # for s in lst.imports:
                    #     print("\t - %s at 0x%08x" % (str(s.name).decode('utf-8'), s.address))
                    #     fp.write('\n\n' + "\t - %s at 0x%08x" % (str(s.name).decode('utf-8'), s.address) + '\n', )
                fp.close()

                #NT and DOS Headers
                fp = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/headers.txt', 'a')
                print('\n [*] Listing Header Members...')
                fp.write('\nDOS Headers')

                for headers in pe.DOS_HEADER.dump():
                    print('\n\t' + headers)
                    fp.write('\n\t' + headers)

                print('\n\nNT Headers')
                for ntheader in pe.NT_HEADERS.dump():
                    print('\n\t' + ntheader)
                    fp.write('\n\t' + ntheader)
                fp.close()

                #Optional Headers

                print('\n [*] Listing Optional Headers...')

                fp = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/optionalheaders.txt', 'a')
                fp.write('\nOptional Headers...')
                for optheader in pe.OPTIONAL_HEADER.dump():
                    print('\n\t' + optheader)
                    fp.write('\n\t' + optheader)
                fp.close()

                #### Strings Analysis Extracting Strings From File ####
                print(' \n\n\n\n----------------------.')
                print(' [*] Strings Analysis |')
                print('----------------------`')
                command = 'strings "'+upload_file_path+'" > /home/sri/PycharmProjects/DjangoFileUpload/server/results/static/strings.txt'
                print('1')
                os.system(command)
                print('2')
                # srt = open(f, "rb")
                # print('1')
                # data = srt.read()
                # print('2')
                # unicode_str = re.compile(u'[\u0020-\u007e]{3,}', re.UNICODE)
                # print('3')
                # myList = unicode_str.findall('',data)
                # print('4')
                # fp = open('strings.txt', 'a')
                # print('5')
                # for p in myList:
                #     fp.write(p + '\n')
                # fp.close()


            except:
                print('\n [-] ' + f + ' DOS Header magic not found.')

            # return render(request, 'file/hello.html',
            #               {'upload_file_path': upload_file_path, 'md5': virustotal[0],
            #                'sha1': virustotal[1], 'sha256': virustotal[2], 'positives': virustotal[3], 'total': virustotal[4]})
            #})

            f = open("/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/VTScan.txt", 'r')
            content1 = f.read()
            f.close()

            f = open("/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/hashes.txt", 'r')
            content2 = f.read()
            f.close()

            f = open("/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/strings.txt", 'r')
            content3 = f.read()
            f.close()

            f = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/imports.txt', 'r')
            content4 = f.read()
            f.close()

            f = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/sections.txt', 'r')
            content5 = f.read()
            f.close()

            f = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/headers.txt', 'r')
            content6 = f.read()
            f.close()

            f = open('/home/sri/PycharmProjects/DjangoFileUpload/server/results/static/optionalheaders.txt', 'r')
            content7 = f.read()
            f.close()

        dynamic=False
        if len(actions)>1:
            dynamic=True

        return render(request, 'file/welcome.html',
                      {'upload_file_path': upload_file_path, 'file_size': file_size,
                       'content1': content1, 'content2': content2, 'content3': content3,
                       'content4': content4, 'content5': content5, 'content6': content6, 'content7': content7,
                       'dynamic': dynamic})

    else:
        return render(request, 'file/index.html')

